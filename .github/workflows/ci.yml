name: Develop CI Pipeline

on:
  push:
    branches: [develop]
  workflow_dispatch:

jobs:
  localstack-deployment-test:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Terraform
        run: |
          sudo apt-get update && sudo apt-get install -y gnupg software-properties-common
          wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg > /dev/null
          gpg --no-default-keyring --keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg --fingerprint

          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update
          sudo apt-get install terraform

      - name: Install tflocal
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          sudo pip3 install terraform-local
      
      - name: Start LocalStack
        run: |
          sudo docker run -d --name localstack -p 4566:4566 -p 4571:4571 localstack/localstack

      - name: Initialize Terraform
        run: tflocal init

      - name: Generate SSH Key Pair
        run: |
          ssh-keygen -t rsa -b 2048 -f ~/.ssh/my-ssh-key -N "" -C "github-actions@my-domain.com"
          echo "SSH key generated:"
          cat ~/.ssh/my-ssh-key.pub

      - name: Terraform Plan
        run: tflocal plan -var="mongo-passwd=${{ secrets.DOCKER_PASSWD }}" -var="neo4j-passwd=${{ secrets.DOCKER_PASSWD }}" -var="docker-passwd=${{ secrets.DOCKER_PASSWD }}"


  aws-deployment-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Configure AWS CLI
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        AWS_REGION: "us-east-1"
      run: |
        aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
        aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
        aws configure set aws_session_token $AWS_SESSION_TOKEN

    - name: Install Terraform
      run: |
        sudo apt-get update && sudo apt-get install -y gnupg software-properties-common
        wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg > /dev/null
        gpg --no-default-keyring --keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg --fingerprint

        echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
        sudo apt update
        sudo apt-get install terraform

    - name: Terraform Init
      run: terraform init

    - name: Generate SSH Key Pair
      run: |
        ssh-keygen -t rsa -b 2048 -f ~/.ssh/my-ssh-key -N "" -C "github-actions@my-domain.com"
        echo "SSH key generated:"
        cat ~/.ssh/my-ssh-key.pub

    - name: Terraform Plan
      run: terraform plan -var="mongo-passwd=${{ secrets.DOCKER_PASSWD }}" -var="neo4j-passwd=${{ secrets.DOCKER_PASSWD }}" -var="docker-passwd=${{ secrets.DOCKER_PASSWD }}"

    - name: Terraform Apply
      run: terraform apply -var="mongo-passwd=${{ secrets.DOCKER_PASSWD }}" -var="neo4j-passwd=${{ secrets.DOCKER_PASSWD }}" -var="docker-passwd=${{ secrets.DOCKER_PASSWD }}" -auto-approve

    - name: Terraform Destroy
      run: terraform destroy -var="mongo-passwd=${{ secrets.DOCKER_PASSWD }}" -var="neo4j-passwd=${{ secrets.DOCKER_PASSWD }}" -var="docker-passwd=${{ secrets.DOCKER_PASSWD }}" -auto-approve
