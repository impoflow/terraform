name: Develop CI Pipeline

on:
  push:
    branches: [develop, main]
  workflow_dispatch:

jobs:
  aws-test-deployment:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Configure AWS CLI
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        AWS_REGION: "us-east-1"
      run: |
        aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
        aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
        aws configure set aws_session_token $AWS_SESSION_TOKEN

    - name: Install Terraform
      run: |
        sudo apt-get update && sudo apt-get install -y gnupg software-properties-common
        wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg > /dev/null
        gpg --no-default-keyring --keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg --fingerprint

        echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
        sudo apt update
        sudo apt-get install terraform

    - name: Terraform Init
      run: terraform init

    - name: Generate SSH Key Pair
      run: |
        ssh-keygen -t rsa -b 2048 -f ~/.ssh/my-ssh-key -N "" -C "github-actions@my-domain.com"
        echo "SSH key generated:"
        cat ~/.ssh/my-ssh-key.pub

    - name: Terraform Plan
      id: plan
      run: terraform plan -var="mongodb-passwd=${{ secrets.MONGO_PASSWD }}" -var="neo4j-passwd=${{ secrets.NEO_PASSWD }}" -var="docker-passwd=${{ secrets.DOCKER_PASSWD }}" -var="github-token=${{ secrets.PAT_TOKEN }}"

    - name: Check Plan Status
      if: github.ref == 'refs/heads/main'
      run: |
        if [[ "${{ steps.plan.outcome }}" != "success" ]]; then
          echo "Terraform Plan failed. Cancelling deployment."
          exit 1
        fi

    - name: Terraform Apply - Main
      if: github.ref == 'refs/heads/main' && success()
      run: terraform apply -var="mongodb-passwd=${{ secrets.MONGO_PASSWD }}" -var="neo4j-passwd=${{ secrets.NEO_PASSWD }}" -var="docker-passwd=${{ secrets.DOCKER_PASSWD }}" -var="github-token=${{ secrets.PAT_TOKEN }}" -auto-approve

    - name: Terraform Apply - Staging (Develop)
      if: github.ref == 'refs/heads/develop' && success()
      run: terraform apply -var="mongodb-passwd=${{ secrets.MONGO_PASSWD }}" -var="neo4j-passwd=${{ secrets.NEO_PASSWD }}" -var="docker-passwd=${{ secrets.DOCKER_PASSWD }}" -var="github-token=${{ secrets.PAT_TOKEN }}" --var "deploy_tests=true" -auto-approve

    - name: Terraform Destroy - Main
      if: github.ref != 'refs/heads/main'
      run: terraform destroy -var="mongodb-passwd=${{ secrets.MONGO_PASSWD }}" -var="neo4j-passwd=${{ secrets.NEO_PASSWD }}" -var="docker-passwd=${{ secrets.DOCKER_PASSWD }}" -var="github-token=${{ secrets.PAT_TOKEN }}" -auto-approve

    - name: Terraform Destroy - Staging (Develop)
      if: github.ref != 'refs/heads/develop'
      run: terraform destroy -var="mongodb-passwd=${{ secrets.MONGO_PASSWD }}" -var="neo4j-passwd=${{ secrets.NEO_PASSWD }}" -var="docker-passwd=${{ secrets.DOCKER_PASSWD }}" -var="github-token=${{ secrets.PAT_TOKEN }}" --var "deploy_tests=true" -auto-approve

